// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package letstour

import (
	"context"
	"database/sql"
)

const getCountry = `-- name: GetCountry :one
SELECT id, name, description, schedule, type, likes, isdeleted, createdat, updatedat, deletedat, enabled FROM Attraction
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCountry(ctx context.Context, id []byte) (Attraction, error) {
	row := q.db.QueryRowContext(ctx, getCountry, id)
	var i Attraction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Schedule,
		&i.Type,
		&i.Likes,
		&i.Isdeleted,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Enabled,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT ID, USERNAME, FULLNAME, EMAIL, PASSWORD 
FROM USER
WHERE EMAIL = ?
`

type GetUserRow struct {
	ID       []byte
	Username string
	Fullname string
	Email    string
	Password string
}

func (q *Queries) GetUser(ctx context.Context, email string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Fullname,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const postReview = `-- name: PostReview :execresult
INSERT INTO Reviews (
    Title,
	Score,
	Description
) VALUES (
    ?,?,?
)
`

type PostReviewParams struct {
	Title       string
	Score       int32
	Description string
}

func (q *Queries) PostReview(ctx context.Context, arg PostReviewParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, postReview, arg.Title, arg.Score, arg.Description)
}
